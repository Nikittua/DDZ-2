import matplotlib.pyplot as plt
from scipy.stats import triang
import random
import math
import scipy.stats as st
from statsmodels.distributions.empirical_distribution import ECDF
import numpy as np
from random import choice
from scipy.stats import norm
# https://www.geeksforgeeks.org/python-triangular-distribution-in-statistics/


# numargs = triang .numargs 
# a = 0.35
# rv = triang (a) 
# print ("RV : \n", rv)  
# distribution = np.linspace(0, np.minimum(rv.dist.b, 3)) 
# print("Distribution : \n", distribution) 
# plt.plot(distribution, rv.pdf(distribution)) 


# #2.1
# R = triang .rvs(0.35, size = 100) 
# print ("Random Variates : \n", R) 


# #2.2
# R = triang.rvs(0.35, size = 1000)
# ecdf = ECDF(R)
# print(R)
# plt.plot(ecdf.x, ecdf.y)
# plt.show()

#3.1
#Лекции страница 9
# expected_value = lambda values: sum(values) / len(values)
# standard_deviation = lambda values, expected_value: np.sqrt(sum([(v - expected_value)**2 for v in values])/len(values))

# theta = 0.35
# size = 1000
# population = np.random.triangular(0, theta, 1, size)
# mean = expected_value(population)*3-1
# print(
#     '''overall population:{1}
#             expected value: {0}
#     '''.format(mean, standard_deviation(population, mean))
# )


# log_likelihood = lambda rate: sum(np.log(expon.pdf(v, scale=rate)) for v in R)

# rates = np.arange(1, 8, 0.01)
# estimates = [log_likelihood(r) for r in rates]

# plt.xlabel('parameter')
# plt.plot(rates, estimates)
# print('parameter value: ', rates[estimates.index(max(estimates))])



# def get_sample(n):
#     return np.random.triangular(0, 0.35, 1, n)

# #3.2
# sample = get_sample(1000)
# ecdf = ECDF(sample)
# plt.plot(ecdf.x, ecdf.y)
# # plt.show()

#3.3
# log_likelihood = lambda rate: sum(np.log(triang.pdf(v, rate)) for v in sample)
# rate = np.arange(0, 1, 0.01)
# estimate = [log_likelihood(r) for r in rate]
# plt.xlabel('parameter')
# plt.plot(rate, estimate)
# # print('parameter value: ', rate[estimate.index(max(estimate))])



def Triangle(theta):
    u = random.uniform(0, 1)
    if u < theta:
        return math.sqrt(u * theta)
    else:
        return 1 - math.sqrt((1-theta-u+u*theta))

theta = 0.35
sample = []
nlist = [5, 10, 100,200,400,600,800,1000]
for n in nlist:
    for _ in range(n):
        n = Triangle(theta)
        sample.append(n)
    ecdf = ECDF(sample)
    plt.plot(ecdf.x, ecdf.y)
    plt.show() 
    print(ecdf.x)   
    # print(sample)








# X = np.arange(-0.1, 1.1, 0.01)
# def eCDF(t,sample):
    
# def CDFt(x, theta):
#     if x<0:
#         return 0
#     if x<=theta:
#         return (x**2)/theta
#     if x<=1:
#         return 1-((1-x)**2)/(1-theta)
#     return 1

# Y_CDF = [CDFt(x, theta) for x in X]

# for sample in samples:
#     Y_CDF = [eCDF(x, theta) for x in X]
#     plt.plot(X, Y_CDF, label='n = {}'.format(n))
#     plt.plot(X, Y_CDF, label='CDF')
#     plt.legend()
#     plt.show()